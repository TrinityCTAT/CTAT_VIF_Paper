#!/usr/bin/env Rscript

suppressPackageStartupMessages(library("argparse"))

parser = ArgumentParser()
parser$add_argument("--cnv_regions", help="cnv regions tsv", required=TRUE, nargs=1)
parser$add_argument("--expr_info", help="expr info tsv", required=TRUE, nargs=1)
parser$add_argument("--gene_spans", help="gene spans tsv", required=TRUE, nargs=1)
parser$add_argument("--viral_insertions", help="viral insertions tsv", required=TRUE, nargs=1)
parser$add_argument("--output_pdf", help="plot output pdf", required=TRUE, nargs=1)
parser$add_argument("--max_rank", help="limit to max rank of expr", required=FALSE, default=20, nargs=1)

args = parser$parse_args()

# extract command-line args
expr_info_tsv = args$expr_info
gene_spans_tsv = args$gene_spans
viral_insertions_tsv = args$viral_insertions
output_pdf = args$output_pdf
max_rank = args$max_rank
cnv_info_tsv = args$cnv_regions

suppressPackageStartupMessages(library("tidyverse"))
suppressPackageStartupMessages(library("cowplot"))
suppressPackageStartupMessages(library("GenomicRanges"))


# parse inputs.
gene_expr_info = read.table(expr_info_tsv, header=T, sep="\t")
gene_spans = read.table(gene_spans_tsv, header=T, sep="\t")
viral_insertions = read.table(viral_insertions_tsv, header=T, sep="\t")
cnv_info = read.table(cnv_info_tsv, header=T, sep="\t")

gene_expr_info = full_join(gene_spans, gene_expr_info, by='gene')

## adjust sample names
viral_insertions$sample_name = str_replace(viral_insertions$sample_name, "^[^-]+-", "TCGA-")
viral_insertions$sample_name = str_replace(viral_insertions$sample_name, "-TP$", "-01A") # hacky
viral_insertions$sample_name = str_replace(viral_insertions$sample_name, "-NT$", "-01B") # hacky



samples_with_insertion = viral_insertions %>% select(sample_name) %>% unique() %>% pull(sample_name)


gene_expr_info = gene_expr_info %>% mutate(has_insertion = (sample_name %in% samples_with_insertion))

gene_expr_info$gene = str_replace(gene_expr_info$gene, "\\^.*$", "")
gene_spans$gene = str_replace(gene_spans$gene, "\\^.*$", "")


ordered_genes = gene_expr_info %>% select(gene, lend, rend) %>% unique() %>% arrange( (lend+rend)/2) %>% select(gene) %>% unique() %>% pull(gene)

gene_expr_info$gene = factor(gene_expr_info$gene, levels=ordered_genes)




# map each virus insertion to its nearest gene

gr_gene_spans = with(gene_spans, GRanges(chrom, IRanges(start=lend, end=rend)))
gr_viral_insertions = with(viral_insertions, GRanges(chrom, IRanges(start=lend, end=rend)))


gene_nearest_insertion = gene_spans[nearest(gr_viral_insertions, gr_gene_spans, ignore.strand=T),]
viral_insertions = bind_cols(viral_insertions, gene_nearest_insertion %>% select(gene))


viral_insertions$gene = factor(viral_insertions$gene, levels=ordered_genes)


# map cnv to overlapping gene

gr_cnv_info = with(cnv_info, GRanges(chrom, IRanges(start=lend, end=rend)))

cnv_gene_overlaps = findOverlaps(gr_cnv_info, gr_gene_spans)

gene_cnv_info = bind_cols(cnv_info[queryHits(cnv_gene_overlaps),] %>% select(sample_name, CN, copy_number),
                          gene_spans[subjectHits(cnv_gene_overlaps),] %>% select(gene))

gene_cnv_info$gene = factor(gene_cnv_info$gene, levels=ordered_genes)

gene_cnv_expr_info = left_join(gene_expr_info, gene_cnv_info, by=c('sample_name', 'gene'))



## statistical analyses for enriched copy number or expression top-ranking at hotspots.


sample_total_counts = gene_cnv_expr_info %>% select(sample_name, has_insertion) %>% unique() %>% group_by(has_insertion) %>% tally(name='total_samples')

run_Fisher = function(a, b, c, d) {
    #message(paste(c(a, b, c, d), collapse=","))
    f = fisher.test(matrix(c(a, b, c, d), ncol=2), alternative = 'greater')
    return(f$p.value)
}


### expression Fisher stats first

gene_cnv_expr_info = gene_cnv_expr_info %>% mutate(rank = ifelse(rank > max_rank, NA, rank)) ## only focus on those within top ranks

expr_toprank_counts = gene_cnv_expr_info %>% filter(! is.na(rank)) %>% select(sample_name, gene, has_insertion) %>% unique() %>% group_by(gene, has_insertion) %>% tally(name='count_expr_topranked')


expr_toprank_counts = full_join(expr_toprank_counts %>% filter(has_insertion) %>% select(-has_insertion),
                                expr_toprank_counts %>% filter(! has_insertion) %>% select(-has_insertion),
                                by='gene',
                                suffix=c('.yes_insertion', '.no_insertion'),
                                )

expr_toprank_counts[ is.na(expr_toprank_counts)] = 0

expr_toprank_counts$total_yes_insertion = sample_total_counts %>% filter(has_insertion) %>% pull(total_samples)
expr_toprank_counts$total_no_insertion = sample_total_counts %>% filter(! has_insertion) %>% pull(total_samples)



expr_toprank_counts = expr_toprank_counts %>% mutate(pval= run_Fisher(count_expr_topranked.yes_insertion,
    total_yes_insertion - count_expr_topranked.yes_insertion,
    count_expr_topranked.no_insertion,
    total_no_insertion - count_expr_topranked.no_insertion))

expr_toprank_counts$pval = p.adjust(expr_toprank_counts$pval, method="BH")

expr_toprank_counts$gene = factor(expr_toprank_counts$gene, levels=ordered_genes)

### cnv level Fisher stats next

CNV_LOSS_THRESHOLD = 1.0
CNV_GAIN_THRESHOLD = 3.0

gene_cnv_levels = gene_cnv_expr_info %>% filter(copy_number >= CNV_GAIN_THRESHOLD | copy_number <= CNV_LOSS_THRESHOLD) %>%
    select(sample_name, gene, has_insertion) %>% unique() %>%
    group_by(gene, has_insertion) %>% tally(name='cnv_gene_counts')


gene_cnv_levels = full_join(gene_cnv_levels %>% filter(has_insertion) %>% select(-has_insertion),
                                gene_cnv_levels %>% filter(! has_insertion) %>% select(-has_insertion),
                                by='gene',
                                suffix=c('.yes_insertion', '.no_insertion'),
                                )

gene_cnv_levels[ is.na(gene_cnv_levels)] = 0

gene_cnv_levels$total_yes_insertion = sample_total_counts %>% filter(has_insertion) %>% pull(total_samples)
gene_cnv_levels$total_no_insertion = sample_total_counts %>% filter(! has_insertion) %>% pull(total_samples)

gene_cnv_levels = gene_cnv_levels %>% mutate(pval= run_Fisher(
    cnv_gene_counts.yes_insertion,
    total_yes_insertion - cnv_gene_counts.yes_insertion,
    cnv_gene_counts.no_insertion,
    total_no_insertion - cnv_gene_counts.no_insertion))

gene_cnv_levels$pval = p.adjust(gene_cnv_levels$pval, method="BH")

gene_cnv_levels$gene = factor(gene_cnv_levels$gene, levels=ordered_genes)


#########################
# run Wilcoxon rank tests


## expression
run_wilcox_expr = function(grp_data) {

    expr_with_insertion = grp_data %>% filter(has_insertion) %>% pull(expr)

    expr_without_insertion = grp_data %>% filter(! has_insertion) %>% pull(expr)

    p_val = 1.0
    if (length(expr_with_insertion) >= 3) {
        w = wilcox.test(expr_with_insertion, expr_without_insertion, alternative='greater')
        p_val = w$p.value
    }
    return(p_val)

}

expr_wilcox = gene_cnv_expr_info %>% group_by(gene) %>% mutate(pval = run_wilcox_expr(cur_data())) %>% select(gene, pval) %>% unique()
expr_wilcox$pval = p.adjust(expr_wilcox$pval, method="BH")

expr_wilcox[is.na(expr_wilcox)] = 1


## cnv:
run_wilcox_cnv = function(gene, grp_data) {

    CN_with_insertion = grp_data %>% filter(has_insertion) %>% pull(CN)

    CN_without_insertion = grp_data %>% filter(! has_insertion) %>% pull(CN)

    p_val = 1.0

    if (length(CN_with_insertion) >= 3) {
        w = wilcox.test(CN_with_insertion, CN_without_insertion, alternative='greater')
        p_val = w$p.value
    }

    #message("")
    #message(gene, " with: ", paste(CN_with_insertion, collapse=","), ", without: ", paste(CN_without_insertion, collapse=",") )

    return(p_val)

}


CNV_wilcox = gene_cnv_expr_info %>% filter(! is.na(CN)) %>% group_by(gene) %>% mutate(pval = run_wilcox_cnv(gene[1], cur_data())) %>% select(gene, pval) %>% unique()
CNV_wilcox$pval = p.adjust(CNV_wilcox$pval, method="BH")

CNV_wilcox[is.na(CNV_wilcox)] = 1





# merge the p-value line plots

enrichments_data = bind_rows(gene_cnv_levels %>% select(gene, pval) %>% mutate(type='cnv', test='F', grp='cnv_F'),
                             expr_toprank_counts %>% select(gene, pval) %>% mutate(type='expr', test='F', grp='expr_F'),
                             CNV_wilcox %>% select(gene, pval) %>% mutate(type='cnv', test='W', grp='cnv_W'),
                             expr_wilcox %>% select(gene, pval) %>% mutate(type='expr', test='W', grp='expr_W')
                             )


enrichments_plot = enrichments_data %>% ggplot(aes(x=gene, y=-1*log10(pval), color=type, shape=test)) +
    geom_point() + geom_line(aes(group=grp)) +
    theme(axis.text.x = element_text(angle = 90, hjust = 1))

enrichments_plot = enrichments_plot + geom_hline(yintercept=-1*log10(0.05), linetype='dotted', col = 'purple')


enrichments_plot = enrichments_plot + theme_classic() +
    theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())



expr_point_size = 1.0
insertion_point_size = 0.5


#p_no_insertion = gene_cnv_expr_info %>% filter(! has_insertion) %>%
#    ggplot() +
#    geom_tile(aes(x=gene, y=sample_name, fill=CN), ) +
#    scale_fill_gradient2(low = "blue", high = "red", mid='white', midpoint=0, limits=c(-2,3), na.value='white' )  +
#     theme_classic() +
#    theme(axis.title.x=element_blank(),
#        axis.text.x=element_blank(),
#        axis.ticks.x=element_blank()) +
#    geom_point(data = gene_cnv_expr_info %>% filter(! has_insertion & ! is.na(rank)), aes(x=gene, y=sample_name, color=rank), size=rel(expr_point_size))

p_with_insertion = gene_cnv_expr_info %>%
    filter(has_insertion) %>%
    ggplot() +
    geom_tile(aes(x=gene, y=sample_name, fill=CN), show.legend = FALSE) +
    scale_fill_gradient2(low = "blue", high = "red", mid='white', midpoint=0, limits=c(-2,3), na.value='white' )  +
    theme_classic() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1, size=rel(1))) +
    geom_point(data = gene_cnv_expr_info %>% filter(has_insertion & ! is.na(rank)), aes(x=gene, y=sample_name, color=rank), size=rel(expr_point_size),show.legend=TRUE)
    #show.legend = FALSE)


## add the insertions

p_with_insertion = p_with_insertion + geom_point(data=viral_insertions, aes(x=gene, y=sample_name), color='salmon', size=rel(insertion_point_size))


combined_plot = plot_grid(#p_no_insertion,
    p_with_insertion, enrichments_plot, ncol=1, align='v', rel_heights=c(#0.5,
    0.5, 0.3), axis='lr')

ggsave(combined_plot, file=output_pdf, height=6)

