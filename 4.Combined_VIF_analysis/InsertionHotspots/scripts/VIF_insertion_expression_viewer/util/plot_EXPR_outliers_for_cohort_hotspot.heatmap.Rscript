#!/usr/bin/env Rscript

suppressPackageStartupMessages(library("argparse"))

parser = ArgumentParser()
parser$add_argument("--expr_info", help="expr info tsv", required=TRUE, nargs=1)
parser$add_argument("--gene_spans", help="gene spans tsv", required=TRUE, nargs=1)
parser$add_argument("--viral_insertions", help="viral insertions tsv", required=TRUE, nargs=1)
parser$add_argument("--output_pdf", help="plot output pdf", required=TRUE, nargs=1)
parser$add_argument("--max_rank", help="limit to max rank of expr", required=FALSE, default=20, nargs=1)

args = parser$parse_args()

# extract command-line args
expr_info_tsv = args$expr_info
gene_spans_tsv = args$gene_spans
viral_insertions_tsv = args$viral_insertions
output_pdf = args$output_pdf
max_rank = args$max_rank


suppressPackageStartupMessages(library("tidyverse"))
suppressPackageStartupMessages(library("cowplot"))
suppressPackageStartupMessages(library("GenomicRanges"))


# parse inputs.
gene_expr_info = read.table(expr_info_tsv, header=T, sep="\t")
gene_spans = read.table(gene_spans_tsv, header=T, sep="\t")
viral_insertions = read.table(viral_insertions_tsv, header=T, sep="\t")

gene_expr_info = full_join(gene_spans, gene_expr_info, by='gene')

## adjust sample names
viral_insertions$sample_name = str_replace(viral_insertions$sample_name, "^[^-]+-", "TCGA-")
viral_insertions$sample_name = str_replace(viral_insertions$sample_name, "-TP$", "-01A") # hacky
viral_insertions$sample_name = str_replace(viral_insertions$sample_name, "-NT$", "-01B") # hacky



samples_with_insertion = viral_insertions %>% select(sample_name) %>% unique() %>% pull(sample_name)


gene_expr_info = gene_expr_info %>% mutate(has_insertion = (sample_name %in% samples_with_insertion))

gene_expr_info$gene = str_replace(gene_expr_info$gene, "\\^.*$", "")
gene_spans$gene = str_replace(gene_spans$gene, "\\^.*$", "")


ordered_genes = gene_expr_info %>% select(gene, lend, rend) %>% unique() %>% arrange( (lend+rend)/2) %>% pull(gene)

gene_expr_info$gene = factor(gene_expr_info$gene, levels=ordered_genes)




# map each virus insertion to its nearest gene

gr_gene_spans = with(gene_spans, GRanges(chrom, IRanges(start=lend, end=rend)))
gr_viral_insertions = with(viral_insertions, GRanges(chrom, IRanges(start=lend, end=rend)))


gene_nearest_insertion = gene_spans[nearest(gr_viral_insertions, gr_gene_spans, ignore.strand=T),]
viral_insertions = bind_cols(viral_insertions, gene_nearest_insertion %>% select(gene))


viral_insertions$gene = factor(viral_insertions$gene, levels=ordered_genes)



## only focus on those within top rank 50
gene_expr_info = gene_expr_info %>% mutate(rank = ifelse(rank > max_rank, NA, rank))



# plot it


p_no_insertion = gene_expr_info %>% filter(! has_insertion) %>%
    ggplot() +
    geom_tile(aes(x=gene, y=sample_name, fill=rank)) +
     theme_classic() +
    theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())


p_with_insertion = gene_expr_info %>% filter(has_insertion) %>%
    ggplot() +
    geom_tile(aes(x=gene, y=sample_name, fill=rank)) +
    theme_classic() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
    geom_point(data=viral_insertions, aes(x=gene, y=sample_name), color='yellow')
    

combined_plot = plot_grid(p_no_insertion, p_with_insertion, ncol=1, align='v', rel_heights=c(0.5, 0.5))

ggsave(combined_plot, file=output_pdf, height=6)

